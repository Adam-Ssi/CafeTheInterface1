
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Bryce
 */
public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates new form FinalMenu
     */
        
        
        
    
        boolean cOnion=false, cTomatoes=false, cLettuce=false, cMeat=false;
        boolean cCoke=false, cSprite=false, cRoyal=false, cWater=false;
        ButtonGroup cbtngrp = new ButtonGroup();
        
        boolean pOnion=false, pTomatoes=false, pLettuce=false, pMeat=false;
        boolean pCoke=false, pSprite=false, pRoyal=false, pWater=false;
        ButtonGroup pbtngrp = new ButtonGroup();
        
        boolean bOnion=false, bTomatoes=false, bLettuce=false, bMeat=false;
        boolean bCoke=false, bSprite=false, bRoyal=false, bWater=false;
        ButtonGroup bbtngrp = new ButtonGroup();
        
        int cShawarma, pShawarma, bShawarma;
        int onionPrice, tomatoesPrice, lettucePrice, aMeatPrice;
        int cokePrice, spritePrice, royalPrice, waterPrice;
           
        int subtotal;
        
        Timer timer;
        int second;
        String ddSecond;
        DecimalFormat dFormat = new DecimalFormat("00");
        
        
    public MainMenu() {
        initComponents();
        setTitle("All Things Shawarma");
        chickenAddsPanel.setVisible(false);
        chickenDrinksPanel.setVisible(false);
        porkAddsPanel.setVisible(false);
        porkDrinksPanel.setVisible(false);
        beefAddsPanel.setVisible(false);
        beefDrinksPanel.setVisible(false);
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        chickenBtn = new javax.swing.JButton();
        porkBtn = new javax.swing.JButton();
        beefBtn = new javax.swing.JButton();
        chickenAddsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        chkOnion = new javax.swing.JCheckBox();
        chkTomatoes = new javax.swing.JCheckBox();
        chkLettuce = new javax.swing.JCheckBox();
        chkMeat = new javax.swing.JCheckBox();
        chickenDrinksPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        chkCoke = new javax.swing.JRadioButton();
        chkSprite = new javax.swing.JRadioButton();
        chkRoyal = new javax.swing.JRadioButton();
        chkWater = new javax.swing.JRadioButton();
        porkAddsPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        pkOnion = new javax.swing.JCheckBox();
        pkTomatoes = new javax.swing.JCheckBox();
        pkLettuce = new javax.swing.JCheckBox();
        pkMeat = new javax.swing.JCheckBox();
        porkDrinksPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        pkCoke = new javax.swing.JRadioButton();
        pkSprite = new javax.swing.JRadioButton();
        pkRoyal = new javax.swing.JRadioButton();
        pkWater = new javax.swing.JRadioButton();
        beefAddsPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        bfOnion = new javax.swing.JCheckBox();
        bfTomatoes = new javax.swing.JCheckBox();
        bfLettuce = new javax.swing.JCheckBox();
        bfMeat = new javax.swing.JCheckBox();
        beefDrinksPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        bfCoke = new javax.swing.JRadioButton();
        bfSprite = new javax.swing.JRadioButton();
        bfRoyal = new javax.swing.JRadioButton();
        bfWater = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();
        checkoutBtn = new javax.swing.JButton();
        counterLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        placeOrder = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        changeOrder = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));

        chickenBtn.setBackground(new java.awt.Color(255, 51, 51));
        chickenBtn.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chickenBtn.setText("<html><center>"+"Chicken"+"</center></html>");
        chickenBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102), 3));
        chickenBtn.setContentAreaFilled(false);
        chickenBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chickenBtn.setOpaque(true);
        chickenBtn.setPreferredSize(new java.awt.Dimension(80, 80));
        chickenBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                chickenBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                chickenBtnMouseExited(evt);
            }
        });
        chickenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chickenBtnActionPerformed(evt);
            }
        });

        porkBtn.setBackground(new java.awt.Color(0, 0, 0));
        porkBtn.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        porkBtn.setText("<html><center>"+"Pork"+"</center></html>");
        porkBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102), 3));
        porkBtn.setContentAreaFilled(false);
        porkBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        porkBtn.setOpaque(true);
        porkBtn.setPreferredSize(new java.awt.Dimension(80, 80));
        porkBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                porkBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                porkBtnMouseExited(evt);
            }
        });
        porkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porkBtnActionPerformed(evt);
            }
        });

        beefBtn.setBackground(new java.awt.Color(255, 51, 51));
        beefBtn.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        beefBtn.setText("<html><center>"+"Beef"+"</center></html>");
        beefBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102), 3));
        beefBtn.setContentAreaFilled(false);
        beefBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        beefBtn.setOpaque(true);
        beefBtn.setPreferredSize(new java.awt.Dimension(80, 80));
        beefBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                beefBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                beefBtnMouseExited(evt);
            }
        });
        beefBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beefBtnActionPerformed(evt);
            }
        });

        chickenAddsPanel.setBackground(new java.awt.Color(255, 204, 51));
        chickenAddsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel1.setBackground(new java.awt.Color(102, 255, 0));
        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Add Ons:");

        chkOnion.setBackground(new java.awt.Color(255, 204, 0));
        chkOnion.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkOnion.setForeground(new java.awt.Color(255, 255, 255));
        chkOnion.setText("Onions");
        chkOnion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkOnion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkOnionItemStateChanged(evt);
            }
        });

        chkTomatoes.setBackground(new java.awt.Color(255, 204, 0));
        chkTomatoes.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkTomatoes.setForeground(new java.awt.Color(255, 255, 255));
        chkTomatoes.setText("Tomatoes");
        chkTomatoes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkTomatoes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkOnionItemStateChanged(evt);
            }
        });

        chkLettuce.setBackground(new java.awt.Color(255, 204, 0));
        chkLettuce.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkLettuce.setForeground(new java.awt.Color(255, 255, 255));
        chkLettuce.setText("Lettuce");
        chkLettuce.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkLettuce.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkOnionItemStateChanged(evt);
            }
        });

        chkMeat.setBackground(new java.awt.Color(255, 204, 0));
        chkMeat.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkMeat.setForeground(new java.awt.Color(255, 255, 255));
        chkMeat.setText("All Meat");
        chkMeat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkMeat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkOnionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout chickenAddsPanelLayout = new javax.swing.GroupLayout(chickenAddsPanel);
        chickenAddsPanel.setLayout(chickenAddsPanelLayout);
        chickenAddsPanelLayout.setHorizontalGroup(
            chickenAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chickenAddsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chickenAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMeat)
                    .addComponent(chkLettuce)
                    .addComponent(chkTomatoes)
                    .addComponent(chkOnion)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        chickenAddsPanelLayout.setVerticalGroup(
            chickenAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chickenAddsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkOnion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkTomatoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkLettuce)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMeat)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chickenDrinksPanel.setBackground(new java.awt.Color(255, 153, 153));
        chickenDrinksPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Drinks:");

        chkCoke.setBackground(new java.awt.Color(255, 153, 153));
        chkCoke.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkCoke.setForeground(new java.awt.Color(255, 255, 255));
        chkCoke.setText("Coke");
        chkCoke.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkCoke.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkCokeItemStateChanged(evt);
            }
        });

        chkSprite.setBackground(new java.awt.Color(255, 153, 153));
        chkSprite.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkSprite.setForeground(new java.awt.Color(255, 255, 255));
        chkSprite.setText("Sprite");
        chkSprite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkCokeItemStateChanged(evt);
            }
        });

        chkRoyal.setBackground(new java.awt.Color(255, 153, 153));
        chkRoyal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkRoyal.setForeground(new java.awt.Color(255, 255, 255));
        chkRoyal.setText("Royal");
        chkRoyal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkRoyal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkCokeItemStateChanged(evt);
            }
        });

        chkWater.setBackground(new java.awt.Color(255, 153, 153));
        chkWater.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        chkWater.setForeground(new java.awt.Color(255, 255, 255));
        chkWater.setText("Water");
        chkWater.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkWater.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkCokeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout chickenDrinksPanelLayout = new javax.swing.GroupLayout(chickenDrinksPanel);
        chickenDrinksPanel.setLayout(chickenDrinksPanelLayout);
        chickenDrinksPanelLayout.setHorizontalGroup(
            chickenDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chickenDrinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chickenDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkWater)
                    .addComponent(chkRoyal)
                    .addComponent(chkSprite)
                    .addComponent(chkCoke)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        chickenDrinksPanelLayout.setVerticalGroup(
            chickenDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chickenDrinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkCoke)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSprite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkRoyal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkWater)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        porkAddsPanel.setBackground(new java.awt.Color(255, 204, 0));
        porkAddsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        porkAddsPanel.setForeground(new java.awt.Color(255, 255, 255));

        jLabel9.setBackground(new java.awt.Color(102, 255, 0));
        jLabel9.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Add Ons:");

        pkOnion.setBackground(new java.awt.Color(255, 204, 0));
        pkOnion.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkOnion.setForeground(new java.awt.Color(255, 255, 255));
        pkOnion.setText("Option 1");
        pkOnion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkOnion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkOnionItemStateChanged(evt);
            }
        });

        pkTomatoes.setBackground(new java.awt.Color(255, 204, 0));
        pkTomatoes.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkTomatoes.setForeground(new java.awt.Color(255, 255, 255));
        pkTomatoes.setText("Option 2");
        pkTomatoes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkTomatoes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkOnionItemStateChanged(evt);
            }
        });

        pkLettuce.setBackground(new java.awt.Color(255, 204, 0));
        pkLettuce.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkLettuce.setForeground(new java.awt.Color(255, 255, 255));
        pkLettuce.setText("Option 3\n");
        pkLettuce.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkLettuce.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkOnionItemStateChanged(evt);
            }
        });

        pkMeat.setBackground(new java.awt.Color(255, 204, 0));
        pkMeat.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkMeat.setForeground(new java.awt.Color(255, 255, 255));
        pkMeat.setText("Option 4");
        pkMeat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkMeat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkOnionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout porkAddsPanelLayout = new javax.swing.GroupLayout(porkAddsPanel);
        porkAddsPanel.setLayout(porkAddsPanelLayout);
        porkAddsPanelLayout.setHorizontalGroup(
            porkAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(porkAddsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(porkAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pkMeat)
                    .addComponent(pkLettuce)
                    .addComponent(pkTomatoes)
                    .addComponent(pkOnion)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        porkAddsPanelLayout.setVerticalGroup(
            porkAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(porkAddsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkOnion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkTomatoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkLettuce)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkMeat)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        porkDrinksPanel.setBackground(new java.awt.Color(255, 153, 153));
        porkDrinksPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel10.setBackground(new java.awt.Color(0, 204, 255));
        jLabel10.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Drinks:");

        pkCoke.setBackground(new java.awt.Color(255, 153, 153));
        pkCoke.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkCoke.setForeground(new java.awt.Color(255, 255, 255));
        pkCoke.setText("Iced Latte");
        pkCoke.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkCoke.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkCokeItemStateChanged(evt);
            }
        });

        pkSprite.setBackground(new java.awt.Color(255, 153, 153));
        pkSprite.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkSprite.setForeground(new java.awt.Color(255, 255, 255));
        pkSprite.setText("Macchiato");
        pkSprite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkCokeItemStateChanged(evt);
            }
        });

        pkRoyal.setBackground(new java.awt.Color(255, 153, 153));
        pkRoyal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkRoyal.setForeground(new java.awt.Color(255, 255, 255));
        pkRoyal.setText("Green Tea");
        pkRoyal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkRoyal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkCokeItemStateChanged(evt);
            }
        });

        pkWater.setBackground(new java.awt.Color(255, 153, 153));
        pkWater.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pkWater.setForeground(new java.awt.Color(255, 255, 255));
        pkWater.setText("Americano");
        pkWater.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pkWater.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pkCokeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout porkDrinksPanelLayout = new javax.swing.GroupLayout(porkDrinksPanel);
        porkDrinksPanel.setLayout(porkDrinksPanelLayout);
        porkDrinksPanelLayout.setHorizontalGroup(
            porkDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(porkDrinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(porkDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pkWater)
                    .addComponent(pkRoyal)
                    .addComponent(pkSprite)
                    .addComponent(pkCoke)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        porkDrinksPanelLayout.setVerticalGroup(
            porkDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(porkDrinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkCoke)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkSprite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkRoyal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pkWater)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        beefAddsPanel.setBackground(new java.awt.Color(255, 204, 0));
        beefAddsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel11.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Add Ons:");

        bfOnion.setBackground(new java.awt.Color(255, 204, 0));
        bfOnion.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfOnion.setForeground(new java.awt.Color(255, 255, 255));
        bfOnion.setText("Option 1");
        bfOnion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfOnion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfOnionItemStateChanged(evt);
            }
        });
        bfOnion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfOnionActionPerformed(evt);
            }
        });

        bfTomatoes.setBackground(new java.awt.Color(255, 204, 0));
        bfTomatoes.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfTomatoes.setForeground(new java.awt.Color(255, 255, 255));
        bfTomatoes.setText("Option 2");
        bfTomatoes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfTomatoes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfOnionItemStateChanged(evt);
            }
        });

        bfLettuce.setBackground(new java.awt.Color(255, 204, 0));
        bfLettuce.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfLettuce.setForeground(new java.awt.Color(255, 255, 255));
        bfLettuce.setText("Option 3\n");
        bfLettuce.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfLettuce.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfOnionItemStateChanged(evt);
            }
        });

        bfMeat.setBackground(new java.awt.Color(255, 204, 0));
        bfMeat.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfMeat.setForeground(new java.awt.Color(255, 255, 255));
        bfMeat.setText("Option 4");
        bfMeat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfMeat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfOnionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout beefAddsPanelLayout = new javax.swing.GroupLayout(beefAddsPanel);
        beefAddsPanel.setLayout(beefAddsPanelLayout);
        beefAddsPanelLayout.setHorizontalGroup(
            beefAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(beefAddsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(beefAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bfMeat)
                    .addComponent(bfLettuce)
                    .addComponent(bfTomatoes)
                    .addComponent(bfOnion)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        beefAddsPanelLayout.setVerticalGroup(
            beefAddsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(beefAddsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfOnion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfTomatoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfLettuce)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfMeat)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        beefDrinksPanel.setBackground(new java.awt.Color(255, 153, 153));
        beefDrinksPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel12.setBackground(new java.awt.Color(51, 204, 255));
        jLabel12.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Drinks:");

        bfCoke.setBackground(new java.awt.Color(255, 153, 153));
        bfCoke.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfCoke.setForeground(new java.awt.Color(255, 255, 255));
        bfCoke.setText("Item_Drink1");
        bfCoke.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfCoke.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfCokeItemStateChanged(evt);
            }
        });

        bfSprite.setBackground(new java.awt.Color(255, 153, 153));
        bfSprite.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfSprite.setForeground(new java.awt.Color(255, 255, 255));
        bfSprite.setText("Item_Drink2");
        bfSprite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfCokeItemStateChanged(evt);
            }
        });

        bfRoyal.setBackground(new java.awt.Color(255, 153, 153));
        bfRoyal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfRoyal.setForeground(new java.awt.Color(255, 255, 255));
        bfRoyal.setText("Item_Drink3");
        bfRoyal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfRoyal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfCokeItemStateChanged(evt);
            }
        });

        bfWater.setBackground(new java.awt.Color(255, 153, 153));
        bfWater.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        bfWater.setForeground(new java.awt.Color(255, 255, 255));
        bfWater.setText("Item_Drink4");
        bfWater.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bfWater.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bfCokeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout beefDrinksPanelLayout = new javax.swing.GroupLayout(beefDrinksPanel);
        beefDrinksPanel.setLayout(beefDrinksPanelLayout);
        beefDrinksPanelLayout.setHorizontalGroup(
            beefDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(beefDrinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(beefDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bfWater)
                    .addComponent(bfRoyal)
                    .addComponent(bfSprite)
                    .addComponent(jLabel12)
                    .addComponent(bfCoke))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        beefDrinksPanelLayout.setVerticalGroup(
            beefDrinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(beefDrinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfCoke)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfSprite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfRoyal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bfWater)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 153, 0));

        ta.setEditable(false);
        ta.setColumns(14);
        ta.setRows(5);
        ta.setText("Orders:");
        jScrollPane3.setViewportView(ta);

        checkoutBtn.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        checkoutBtn.setText("CHECKOUT");
        checkoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkoutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                checkoutBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                checkoutBtnMouseExited(evt);
            }
        });
        checkoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBtnActionPerformed(evt);
            }
        });

        counterLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(counterLabel)
                    .addComponent(checkoutBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(counterLabel)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chickenBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(chickenAddsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chickenDrinksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(porkAddsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(porkBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(porkDrinksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(beefBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(beefAddsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(beefDrinksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chickenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(porkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(beefBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(porkAddsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(beefAddsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chickenAddsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 24, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(porkDrinksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chickenDrinksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(beefDrinksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jMenuBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jMenuBar1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        fileMenu.setText("File");

        placeOrder.setText("Place Order");
        placeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeOrderActionPerformed(evt);
            }
        });
        fileMenu.add(placeOrder);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        changeOrder.setText("Change Order");
        changeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeOrderActionPerformed(evt);
            }
        });
        editMenu.add(changeOrder);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void beefBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_beefBtnMouseExited
        // TODO add your handling code here:
        beefBtn.setBorder(BorderFactory.createLineBorder(new Color(0,51,102),3));
    }//GEN-LAST:event_beefBtnMouseExited

    private void beefBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_beefBtnMouseEntered
        // TODO add your handling code here:
        beefBtn.setBorder(BorderFactory.createLineBorder(Color.blue,3));
    }//GEN-LAST:event_beefBtnMouseEntered

    private void porkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porkBtnActionPerformed
        // TODO add your handling code here:
        porkAddsPanel.setVisible(true);
        porkDrinksPanel.setVisible(true);
        pShawarma = 125;
        chickenBtn.setEnabled(false);
        beefBtn.setEnabled(false);
    }//GEN-LAST:event_porkBtnActionPerformed

    private void porkBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_porkBtnMouseExited
        // TODO add your handling code here:
        porkBtn.setBorder(BorderFactory.createLineBorder(new Color(0,51,102),3));
    }//GEN-LAST:event_porkBtnMouseExited

    private void porkBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_porkBtnMouseEntered
        // TODO add your handling code here:
        porkBtn.setBorder(BorderFactory.createLineBorder(Color.blue,3));
    }//GEN-LAST:event_porkBtnMouseEntered

    private void chickenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chickenBtnActionPerformed
        // TODO add your handling code here:
        chickenAddsPanel.setVisible(true);
        chickenDrinksPanel.setVisible(true);
        cShawarma = 100;
        porkBtn.setEnabled(false);
        beefBtn.setEnabled(false);
    }//GEN-LAST:event_chickenBtnActionPerformed

    private void chickenBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chickenBtnMouseExited
        // TODO add your handling code here:
        chickenBtn.setBorder(BorderFactory.createLineBorder(new Color(0,51,102),3));
    }//GEN-LAST:event_chickenBtnMouseExited

    private void chickenBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chickenBtnMouseEntered
        // TODO add your handling code here:
        chickenBtn.setBorder(BorderFactory.createLineBorder(Color.blue,3));
    }//GEN-LAST:event_chickenBtnMouseEntered

    private void beefBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beefBtnActionPerformed
        // TODO add your handling code here:
        beefAddsPanel.setVisible(true);
        beefDrinksPanel.setVisible(true);
        bShawarma = 150;
        porkBtn.setEnabled(false);
        chickenBtn.setEnabled(false);
    }//GEN-LAST:event_beefBtnActionPerformed

    private void placeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrderActionPerformed
        // TODO add your handling code here:
        if(!chickenAddsPanel.isVisible() && !porkAddsPanel.isVisible() && !beefAddsPanel.isVisible()){
            JOptionPane.showMessageDialog(null, "You have no order yet!", "Place Order Error", JOptionPane.ERROR_MESSAGE);
        }
        
        if(evt.getSource() == placeOrder){
            if(chickenAddsPanel.isVisible() && chickenDrinksPanel.isVisible()){
                ta.append("\r \n" + "Chicken Shawarma" + "\t" + cShawarma);
                if(cOnion == true){
                    ta.append("\r \n" + "With Onion" + "\t \t" + onionPrice);
                }
                if(cTomatoes == true){
                    ta.append("\r \n" + "With Tomatoes" + "\t \t" + tomatoesPrice);
                }
                if(cLettuce == true){
                    ta.append("\r \n" + "With Lettuce" + "\t \t" + lettucePrice);
                }
                if(cMeat == true){
                    ta.append("\r \n" + "All Meat Only" + "\t \t" + aMeatPrice);
                }
                if(cCoke == true){
                    ta.append("\r \n" + "Coke" + "\t \t" + cokePrice);
                }
                if(cSprite == true){
                    ta.append("\r \n" + "Sprite" + "\t \t" + spritePrice);
                }
                if(cRoyal == true){
                    ta.append("\r \n" + "Royal" + "\t \t" + royalPrice);
                }
                if(cWater == true){
                    ta.append("\r \n" + "Water" + "\t \t" + waterPrice);
                }
            }
            else if(porkAddsPanel.isVisible() && porkDrinksPanel.isVisible()){
                ta.append("\r \n" + "Pork Shawarma" + "\t" + pShawarma);
                if(pOnion == true){
                    ta.append("\r \n" + "With Onion" + "\t \t" + onionPrice);
                }
                if(pTomatoes == true){
                    ta.append("\r \n" + "With Tomatoes" + "\t \t" + tomatoesPrice);
                }
                if(pLettuce == true){
                    ta.append("\r \n" + "With Lettuce" + "\t \t" + lettucePrice);
                }
                if(pMeat == true){
                    ta.append("\r \n" + "All Meat Only" + "\t \t" + aMeatPrice);
                }
                if(pCoke == true){
                    ta.append("\r \n" + "Coke" + "\t \t" + cokePrice);
                }
                if(pSprite == true){
                    ta.append("\r \n" + "Sprite" + "\t \t" + spritePrice);
                }
                if(pRoyal == true){
                    ta.append("\r \n" + "Royal" + "\t \t" + royalPrice);
                }
                if(pWater == true){
                    ta.append("\r \n" + "Water" + "\t \t" + waterPrice);
                }
            }
            else if(beefAddsPanel.isVisible() && beefDrinksPanel.isVisible()){
                ta.append("\r \n" + "Pork Shawarma" + "\t" + bShawarma);
                if(bOnion == true){
                    ta.append("\r \n" + "With Onion" + "\t \t" + onionPrice);
                }
                if(bTomatoes == true){
                    ta.append("\r \n" + "With Tomatoes" + "\t \t" + tomatoesPrice);
                }
                if(bLettuce == true){
                    ta.append("\r \n" + "With Lettuce" + "\t \t" + lettucePrice);
                }
                if(bMeat == true){
                    ta.append("\r \n" + "All Meat Only" + "\t \t" + aMeatPrice);
                }
                if(bCoke == true){
                    ta.append("\r \n" + "Coke" + "\t \t" + cokePrice);
                }
                if(bSprite == true){
                    ta.append("\r \n" + "Sprite" + "\t \t" + spritePrice);
                }
                if(bRoyal == true){
                    ta.append("\r \n" + "Royal" + "\t \t" + royalPrice);
                }
                if(bWater == true){
                    ta.append("\r \n" + "Water" + "\t \t" + waterPrice);
                }
            }
        }
    }//GEN-LAST:event_placeOrderActionPerformed

    private void chkOnionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkOnionItemStateChanged
        // TODO add your handling code here:
        if(evt.getSource() == chkOnion){
            if(evt.getStateChange() == 1){
                cOnion = true;  
                chkMeat.setEnabled(false);
                onionPrice=10;
            }else{
                cOnion = false; 
                chkMeat.setEnabled(true);
                onionPrice=0;
            }
        }
        if(evt.getSource() == chkTomatoes){
            if(evt.getStateChange() == 1){
                cTomatoes = true;
                chkMeat.setEnabled(false);
                tomatoesPrice=10;
            }else{
                cTomatoes = false; 
                chkMeat.setEnabled(true);
                tomatoesPrice=0;
            }
        }
        if(evt.getSource() == chkLettuce){
            if(evt.getStateChange() == 1){
                cLettuce = true;
                chkMeat.setEnabled(false);
                lettucePrice=10;
            }else{
                cLettuce = false; 
                chkMeat.setEnabled(true);
                tomatoesPrice=0;
            }
        }
        if(evt.getSource() == chkMeat){
            if(evt.getStateChange() == 1){
                cMeat = true;
                chkOnion.setEnabled(false);
                chkTomatoes.setEnabled(false);
                chkLettuce.setEnabled(false);
                aMeatPrice=30;
            }else{
                cMeat = false;
                chkOnion.setEnabled(true);
                chkTomatoes.setEnabled(true);
                chkLettuce.setEnabled(true);
                aMeatPrice=0;
            }
        }
    }//GEN-LAST:event_chkOnionItemStateChanged

    private void chkCokeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkCokeItemStateChanged
        // TODO add your handling code here:
        cbtngrp.add(chkCoke);
        cbtngrp.add(chkSprite);
        cbtngrp.add(chkRoyal);
        cbtngrp.add(chkWater);
        
        if(evt.getSource() == chkCoke){
            if(evt.getStateChange() == 1){
                cCoke = true;
                cokePrice=40;
            }else{
                cCoke = false;
                cokePrice=0;
            }
        }
        if(evt.getSource() == chkSprite){
            if(evt.getStateChange() == 1){
                cSprite = true;
                spritePrice=40;
            }else{
                cSprite = false;
                spritePrice=0;
            }
        }
        if(evt.getSource() == chkRoyal){
            if(evt.getStateChange() == 1){
                cRoyal = true;
                royalPrice=40;
            }else{
                cRoyal = false;
                royalPrice=0;
            }
        }
        if(evt.getSource() == chkWater){
            if(evt.getStateChange() == 1){
                cWater = true;
                waterPrice=20;
            }else{
                cWater = false;
                waterPrice=0;
            }
        }
    }//GEN-LAST:event_chkCokeItemStateChanged

    private void pkOnionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pkOnionItemStateChanged
        // TODO add your handling code here:
        if(evt.getSource() == pkOnion){
            if(evt.getStateChange() == 1){
                pOnion = true;  
                pkMeat.setEnabled(false);
                onionPrice=10;
            }else{
                pOnion = false; 
                pkMeat.setEnabled(true);
                onionPrice=0;
            }
        }
        if(evt.getSource() == pkTomatoes){
            if(evt.getStateChange() == 1){
                pTomatoes = true;
                pkMeat.setEnabled(false);
                tomatoesPrice=10;
            }else{
                pTomatoes = false; 
                pkMeat.setEnabled(true);
                tomatoesPrice=0;
            }
        }
        if(evt.getSource() == pkLettuce){
            if(evt.getStateChange() == 1){
                pLettuce = true;
                pkMeat.setEnabled(false);
                lettucePrice=10;
            }else{
                pLettuce = false; 
                pkMeat.setEnabled(true);
                lettucePrice=0;
            }
        }
        if(evt.getSource() == pkMeat){
            if(evt.getStateChange() == 1){
                pMeat = true;
                pkOnion.setEnabled(false);
                pkTomatoes.setEnabled(false);
                pkLettuce.setEnabled(false);
                aMeatPrice=30;
            }else{
                pMeat = false;
                pkOnion.setEnabled(true);
                pkTomatoes.setEnabled(true);
                pkLettuce.setEnabled(true);
                aMeatPrice=0;
            }
        }
    }//GEN-LAST:event_pkOnionItemStateChanged

    private void pkCokeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pkCokeItemStateChanged
        // TODO add your handling code here:
        pbtngrp.add(pkCoke);
        pbtngrp.add(pkSprite);
        pbtngrp.add(pkRoyal);
        pbtngrp.add(pkWater);
        
        if(evt.getSource() == pkCoke){
            if(evt.getStateChange() == 1){
                pCoke = true;
                cokePrice=40;
            }else{
                pCoke = false;
                cokePrice=0;
            }
        }
        if(evt.getSource() == pkSprite){
            if(evt.getStateChange() == 1){
                pSprite = true;
                spritePrice=40;
            }else{
                pSprite = false;
                spritePrice=0;
            }
        }
        if(evt.getSource() == pkRoyal){
            if(evt.getStateChange() == 1){
                pRoyal = true;
                royalPrice=40;
            }else{
                pRoyal = false;
                royalPrice=0;
            }
        }
        if(evt.getSource() == pkWater){
            if(evt.getStateChange() == 1){
                pWater = true;
                waterPrice=20;
            }else{
                pWater = false;
                waterPrice=20;
            }
        }
    }//GEN-LAST:event_pkCokeItemStateChanged

    private void bfOnionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bfOnionItemStateChanged
        // TODO add your handling code here:
        if(evt.getSource() == bfOnion){
            if(evt.getStateChange() == 1){
                bOnion = true;  
                bfMeat.setEnabled(false);
                onionPrice=10;
            }else{
                bOnion = false; 
                bfMeat.setEnabled(true);
                onionPrice=0;
            }
        }
        if(evt.getSource() == bfTomatoes){
            if(evt.getStateChange() == 1){
                bTomatoes = true;
                bfMeat.setEnabled(false);
                tomatoesPrice=10;
            }else{
                bTomatoes = false; 
                bfMeat.setEnabled(true);
                tomatoesPrice=0;
            }
        }
        if(evt.getSource() == bfLettuce){
            if(evt.getStateChange() == 1){
                bLettuce = true;
                bfMeat.setEnabled(false);
                lettucePrice=10;
            }else{
                bLettuce = false; 
                bfMeat.setEnabled(true);
                lettucePrice=0;
            }
        }
        if(evt.getSource() == bfMeat){
            if(evt.getStateChange() == 1){
                bMeat = true;
                bfOnion.setEnabled(false);
                bfTomatoes.setEnabled(false);
                bfLettuce.setEnabled(false);
                aMeatPrice=30;              
            }else{
                bMeat = false;
                bfOnion.setEnabled(true);
                bfTomatoes.setEnabled(true);
                bfLettuce.setEnabled(true);
                aMeatPrice=0; 
            }
        }
    }//GEN-LAST:event_bfOnionItemStateChanged

    private void bfCokeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bfCokeItemStateChanged
        // TODO add your handling code here:
        bbtngrp.add(bfCoke);
        bbtngrp.add(bfSprite);
        bbtngrp.add(bfRoyal);
        bbtngrp.add(bfWater);
        
        if(evt.getSource() == bfCoke){
            if(evt.getStateChange() == 1){
                bCoke = true;
                cokePrice=40;
            }else{
                bCoke = false;
                cokePrice=0;
            }
        }
        if(evt.getSource() == bfSprite){
            if(evt.getStateChange() == 1){
                bSprite = true;
                spritePrice=40;
            }else{
                bSprite = false;
                spritePrice=40;
        }
        if(evt.getSource() == bfRoyal){
            if(evt.getStateChange() == 1){
                bRoyal = true;
                royalPrice=40;
            }else{
                bRoyal = false;
                royalPrice=0;
            }
        }
        if(evt.getSource() == bfWater){
            if(evt.getStateChange() == 1){
                bWater = true;
                waterPrice=20;
            }else{
                bWater = false;
                waterPrice=0;
            }
        }
      }
    }//GEN-LAST:event_bfCokeItemStateChanged

    private void changeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeOrderActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null,"Change Order?", "Order Confirmation", JOptionPane.YES_NO_OPTION);
        if(result == 0 ){
        cleanOrderForm();
        }
               
    }//GEN-LAST:event_changeOrderActionPerformed

    private void checkoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutBtnActionPerformed
        // TODO add your handling code here:
        subtotal = cShawarma+pShawarma+bShawarma+onionPrice+tomatoesPrice+
                   lettucePrice+aMeatPrice+cokePrice+spritePrice+royalPrice+waterPrice;
        if(!chickenAddsPanel.isVisible() && !porkAddsPanel.isVisible() && !beefAddsPanel.isVisible()){
            JOptionPane.showMessageDialog(null, "You have no order yet!", "Checkout Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(null,"Here is your receipt! \n"+
                 ta.getText() +
                 "\nTotal: " +
                 subtotal
                 ,"Receipt", JOptionPane.PLAIN_MESSAGE);
         countdownTimer();
         timer.start(); 
                }
            
         
    }//GEN-LAST:event_checkoutBtnActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void checkoutBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkoutBtnMouseEntered
        // TODO add your handling code here:
        checkoutBtn.setBackground(Color.GREEN);
    }//GEN-LAST:event_checkoutBtnMouseEntered

    private void checkoutBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkoutBtnMouseExited
        // TODO add your handling code here:
        checkoutBtn.setBackground(Color.WHITE);
    }//GEN-LAST:event_checkoutBtnMouseExited

    private void bfOnionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfOnionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bfOnionActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public void countdownTimer(){
        timer = new Timer(1000, new ActionListener(){
            
            @Override
            public void actionPerformed(ActionEvent e){
            
                second--;
                ddSecond = dFormat.format(second);
                
                counterLabel.setText("Order form will reset in: " + ddSecond);
                
                if(second == -1){
                    second = 5;
                    ddSecond = dFormat.format(second);
                    counterLabel.setText(ddSecond);
                }
                if(second==0){
                    timer.stop();
                    cleanOrderForm();
                    counterLabel.setText(null);
                }
            }
        });
    }
    
    public void cleanOrderForm(){
        chickenAddsPanel.setVisible(false);
        chickenDrinksPanel.setVisible(false);
        porkAddsPanel.setVisible(false);
        porkDrinksPanel.setVisible(false);
        beefAddsPanel.setVisible(false);
        beefDrinksPanel.setVisible(false);
        
        chickenBtn.setEnabled(true);
        porkBtn.setEnabled(true);
        beefBtn.setEnabled(true);
        
        chkOnion.setSelected(false);
        chkTomatoes.setSelected(false);
        chkLettuce.setSelected(false);
        chkMeat.setSelected(false);
        cbtngrp.clearSelection();
        
        pkOnion.setSelected(false);
        pkTomatoes.setSelected(false);
        pkLettuce.setSelected(false);
        pkMeat.setSelected(false);
        pbtngrp.clearSelection();
        
        bfOnion.setSelected(false);
        bfTomatoes.setSelected(false);
        bfLettuce.setSelected(false);
        bfMeat.setSelected(false);
        bbtngrp.clearSelection();
        
        cShawarma=0;
        bShawarma=0;
        pShawarma=0;        
        subtotal=0;
        
        ta.setText("Orders:");
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel beefAddsPanel;
    private javax.swing.JButton beefBtn;
    private javax.swing.JPanel beefDrinksPanel;
    private javax.swing.JRadioButton bfCoke;
    private javax.swing.JCheckBox bfLettuce;
    private javax.swing.JCheckBox bfMeat;
    private javax.swing.JCheckBox bfOnion;
    private javax.swing.JRadioButton bfRoyal;
    private javax.swing.JRadioButton bfSprite;
    private javax.swing.JCheckBox bfTomatoes;
    private javax.swing.JRadioButton bfWater;
    private javax.swing.JMenuItem changeOrder;
    private javax.swing.JButton checkoutBtn;
    private javax.swing.JPanel chickenAddsPanel;
    private javax.swing.JButton chickenBtn;
    private javax.swing.JPanel chickenDrinksPanel;
    private javax.swing.JRadioButton chkCoke;
    private javax.swing.JCheckBox chkLettuce;
    private javax.swing.JCheckBox chkMeat;
    private javax.swing.JCheckBox chkOnion;
    private javax.swing.JRadioButton chkRoyal;
    private javax.swing.JRadioButton chkSprite;
    private javax.swing.JCheckBox chkTomatoes;
    private javax.swing.JRadioButton chkWater;
    private javax.swing.JLabel counterLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton pkCoke;
    private javax.swing.JCheckBox pkLettuce;
    private javax.swing.JCheckBox pkMeat;
    private javax.swing.JCheckBox pkOnion;
    private javax.swing.JRadioButton pkRoyal;
    private javax.swing.JRadioButton pkSprite;
    private javax.swing.JCheckBox pkTomatoes;
    private javax.swing.JRadioButton pkWater;
    private javax.swing.JMenuItem placeOrder;
    private javax.swing.JPanel porkAddsPanel;
    private javax.swing.JButton porkBtn;
    private javax.swing.JPanel porkDrinksPanel;
    private javax.swing.JTextArea ta;
    // End of variables declaration//GEN-END:variables
}
